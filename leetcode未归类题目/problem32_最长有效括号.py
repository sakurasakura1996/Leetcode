"""
32. 最长有效括号
给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。
示例 1:
输入: "(()"
输出: 2
解释: 最长有效括号子串为 "()"

示例 2:
输入: ")()())"
输出: 4
解释: 最长有效括号子串为 "()()"
"""
# 这道题以前貌似做过，有点印象，不过没做过也知道应该最常用的方法就是 动态规划。
# dp[i] 表示的意思是 以第i个字符结尾的字符串有效子串的长度，且有效字符串以第i个元素结尾。
class Solution:
    def longestValidParentheses(self, s: str) -> int:
        if not s or len(s) < 2:
            return 0
        s_len = len(s)
        dp = [0] * (s_len+1)
        for i in range(2, s_len+1):
            if s[i-1] == ')':
                if s[i-2] == '(':
                    dp[i] = dp[i-2] + 2
                elif s[i-2-dp[i-1]] == '(' and (i-2-dp[i-1]) >= 0: # 要注意添加这个判断条件，因为如果s[-1]是有含义的
                    # 表示最后字符串末尾了
                    dp[i] = dp[i-1] + 2 + dp[i-2-dp[i-1]]
        return max(dp)

    # 题解中还使用了栈的数据结构来做。暴力法的话我们第一直觉就是找到每个可能的子串后判断有效性，这样复杂度是三次方，但是通过栈
    #　我们可以在遍历给定字符串的过程中去判断到目前为止扫描的子串的有效性，同时能得到最长有效括号的长度
    # 具体做法是我们始终保持栈底元素为当前已经遍历过的元素中「最后一个没有被匹配的右括号的下标」，这样的做法主要是考虑了边界条件的处理，
    # 栈里其他元素维护左括号的下标：对于遇到的每个 \text{‘(’}‘(’ ，我们将它的下标放入栈中对于遇到的每个 \text{‘)’}‘)’ ，
    # 我们先弹出栈顶元素表示匹配了当前右括号：如果栈为空，说明当前的右括号为没有被匹配的右括号，我们将其下标放入栈中来更新我们之前提到的
    # 「最后一个没有被匹配的右括号的下标」如果栈不为空，当前右括号的下标减去栈顶元素即为「以该右括号为结尾的最长有效括号的长度」
    # 我们从前往后遍历字符串并更新答案即可。
    # 需要注意的是，如果一开始栈为空，第一个字符为左括号的时候我们会将其放入栈中，这样就不满足提及的「最后一个没有被匹配的右括号的下标」，
    # 为了保持统一，我们在一开始的时候往栈中放入一个值为 -1−1 的元素。


solu = Solution()
s = "()(())"
ans = solu.longestValidParentheses(s)
print(ans)



