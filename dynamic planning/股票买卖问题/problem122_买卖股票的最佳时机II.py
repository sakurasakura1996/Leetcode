"""
122. 买卖股票的最佳时机 II
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1:
输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:
输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:
输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
提示：
1 <= prices.length <= 3 * 10 ^ 4
0 <= prices[i] <= 10 ^ 4
"""
# 这题相比于上一题，唯一的不同处在于，这道题没有交易次数限制，上一题只允许交易一次。
# 这道题可以用一个二维dp数组来解决，因为 没有交易次数限制，所以交易次数的维度可以取消。动态规划定义dp数组就是
# 分析问题中有几个变化的状态，比如这里的状态就是 一个天数，一个手上是否持有股票两个状态啊。两个状态，二维dp肯定ok啦。
from typing import List
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices or len(prices) == 1:
            return 0
        n = len(prices)

        dp = [[0] * 2 for _ in range(n)]
        # 边界初始化
        # dp[0][0] = 0
        dp[0][1] = -prices[0]
        for i in range(1, n):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])

        return dp[n-1][0]

    # 那么看到上面的动态规划想法，我们是不是可以发现这里只需要O(1)的空间复杂度来做呢
    # 因为新的dp[i][0]只取决于上两个数的状态，所以只需要用两个数就行了。


solu = Solution()
prices = [7,1,5,3,6,4]
ans = solu.maxProfit(prices)
print(ans)


