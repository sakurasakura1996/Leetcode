"""
面试题 17.09. 第 k 个数
有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素因子。
例如，前几个数按顺序应该是 1，3，5，7，9，15，21。
示例 1:
输入: k = 5
输出: 9
"""
# 不是，这道题和队列有关系吗？
# 看到的大多数解法都是三指针方法，确实很概括性的描述了题目的意思，我自己在纸上乱画的时候，其实也就是把不同的数
# 分别乘以3，5，7，但是到了后面，我不知道该怎么排序啊，感觉没有规律。在看到别用三指针法或者说动态规划方法的时候，
# 编码倒不是很难，关键就是自己在思路上的转变啊。每一轮，新加入ans数组的数，肯定就是前面的数*3，*5，*7，然后比较下
# 就能确定是接下来的数中最小的数了，为啥俺没想到呢。。。
class Solution:
    def getKthMagicNumber(self, k: int) -> int:
        p3, p5, p7 = 0, 0, 0
        dp = [1] * k
        for i in range(1, k):
            ans = min(dp[p3] * 3, dp[p5] * 5, dp[p7] * 7)
            # 下面这个判断结构就是为了，比如p3指向5，p5指向3的时候，两者结果相等，这样这两个指针都要向右移一位
            if dp[p3] * 3 == ans:
                p3 += 1
            if dp[p5] * 5 == ans:
                p5 += 1
            if dp[p7] * 7 == ans:
                p7 += 1
            dp[i] = ans
        print(dp)
        return dp[k-1]


if __name__ == '__main__':
    solu = Solution()
    k = 7
    ans = solu.getKthMagicNumber(k)
    print(ans)
